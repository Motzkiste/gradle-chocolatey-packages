<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd">
  <metadata>
    <id>gradle</id>
    <title>Gradle</title>
    <version>4.8</version>
    <authors>Gradle Inc.</authors>
    <owners>Patrick Brochado</owners>
    <summary>Gradle is a modern open source polyglot build automation system. It can automate and integrate your devOps toolchain with a concise and expressive build programming language based upon the concepts of Apache Ant and Apache Maven.</summary>
    <description>Gradle combines the power and flexibility of Apache Ant with the dependency management and conventions of Apache Maven into a more effective way to build. Powered by a Groovy DSL and packed with innovation, Gradle provides a declarative way to describe all kinds of builds through sensible defaults. Gradle is quickly becoming the build system of choice for many open source projects, leading edge enterprises and legacy automation challenges.

Gradle is a build tool with a focus on build automation and support for multi-language development. If you are building, testing, publishing, and deploying software on any platform, Gradle offers a flexible model that can support the entire development lifecycle from compiling and packaging code to publishing web sites. Gradle has been designed to support build automation across multiple languages and platforms including Java, Scala, Android, C/C++, and Groovy, and is closely integrated with development tools and continuous integration servers including Eclipse, IntelliJ, and Jenkins.

Learn more about what makes Gradle a compelling choice for build automation or get started with Gradle right now.</description>
    <projectUrl>http://gradle.org/</projectUrl>
    <tags>gradle java build automation management admin</tags>
    <copyright>© 2017 Gradle Inc.</copyright>
    <licenseUrl>http://www.gradle.org/license</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <iconUrl>https://upload.wikimedia.org/wikipedia/en/a/ab/Updated_logo_for_Gradle.png</iconUrl>
    <releaseNotes>The Gradle team is pleased to announce Gradle 4.8.

First and foremost, this release of Gradle features [dependency locking](https://docs.gradle.org/4.8/release-notes#locking-of-dynamic-dependencies): a mechanism for locking dependency versions which allows builds to become reproducible in the face of dynamic versions or version ranges.
Read the [user manual chapter on dependency locking](https://docs.gradle.org/4.8/userguide/dependency_locking.html) to learn how to take advantage of this exciting new feature.

The publishing plugins get some highly-anticipated improvements in this release:

- The Signing Plugin now supports [signing all artifacts of a publication](https://docs.gradle.org/4.8/release-notes#signing-publications).
- The Maven Publish Plugin now provides a dedicated, type-safe [DSL to customize the POM generated](https://docs.gradle.org/4.8/release-notes#customizing-the-generated-pom) as part of a Maven publication.
- The Ivy Publish Plugin now provides a dedicated, type-safe [DSL to customize the Ivy module descriptor generated](https://docs.gradle.org/4.8/release-notes#customizing-the-generated-ivy-module-descriptor) as part of an Ivy publication.
- Configuration-wide [dependency excludes are now published](https://docs.gradle.org/4.8/release-notes#configuration-wide-dependency-excludes-are-now-published)

The maven-publish and ivy-publish plugins are now considered stable and use of the maven plugin is discouraged as it will eventually be deprecated — please migrate.

User experience for [incremental annotation processing is improved](https://docs.gradle.org/4.8/release-notes#improved-incremental-annotation-processing).
Compilation will no longer fail when a processor does something that Gradle detects will not work incrementally.
Unused non-incremental processors no longer prevent incremental compilation.
Finally, annotation processors are now able to decide dynamically if they are incremental or not.
This allows processors with extension mechanisms to check extensions for incrementality before enabling incremental annotation processing.

New native plugins continue to improve with [better control over system include path](https://docs.gradle.org/4.8/release-notes#better-control-over-system-include-path-for-native-compilation) for native compilation and [other improvements](https://github.com/gradle/gradle-native/blob/master/docs/RELEASE-NOTES.md#changes-included-in-gradle-48).

Gradle 4.8 includes Kotlin DSL 0.17.5, bringing the latest Kotlin 1.2.41 release and many improvements to the user experience including location aware runtime error reporting, convenient configuration of nested extensions, faster and leaner configuration time, and TestKit support.
At the same time the IntelliJ IDEA Kotlin Plugin fixed many long standing build script editing related issues.
See details and examples in the [Kotlin DSL v0.17 release notes](https://github.com/gradle/kotlin-dsl/releases/tag/v0.17.5).

We hope you will build happiness with Gradle 4.8, and we look forward to your feedback [via Twitter](https://twitter.com/gradle) or on [GitHub](https://github.com/gradle).</releaseNotes>
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
